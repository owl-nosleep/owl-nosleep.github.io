---
import { marked } from 'marked';
import { experiences, type Experience } from '../data/experiences';

// ËôïÁêÜÁ∂ìÊ≠∑Ë≥áÊñôÔºåÊ∑ªÂä† HTML ÂÖßÂÆπ
const processedExperiences = experiences.map((exp) => ({
	...exp,
	contentHtml: exp.content ? marked.parse(exp.content) : ''
}));

// ÊåâÂπ¥‰ªΩÂàÜÁµÑÊ¥ªÂãï
const groupedExperiences = processedExperiences.reduce((acc, exp) => {
	if (!acc[exp.year]) {
		acc[exp.year] = [];
	}
	acc[exp.year].push(exp);
	return acc;
}, {} as Record<string, Experience[]>);

// Âú®ÊØèÂÄãÂπ¥‰ªΩÂÖßÊåâ order ÊéíÂ∫è
Object.keys(groupedExperiences).forEach(year => {
	groupedExperiences[year].sort((a, b) => (a.order || 0) - (b.order || 0));
});

// ÊåâÂπ¥‰ªΩÂçáÂ∫èÊéíÂàóÔºàÊó©Âà∞ÊôöÔºâ
const sortedYears = Object.keys(groupedExperiences).sort((a, b) => parseInt(a) - parseInt(b));

const getTypeIcon = (type: string) => {
	switch (type) {
		case "achievement":
			return "üèÜ";
		case "education":
			return "üìö";
		case "competition":
			return "üéØ";
		case "certification":
			return "üìú";
		default:
			return "‚ú®";
	}
};

const getTypeColor = (type: string) => {
	switch (type) {
		case "achievement":
			return "text-yellow-600 dark:text-yellow-400";
		case "education":
			return "text-blue-600 dark:text-blue-400";
		case "competition":
			return "text-green-600 dark:text-green-400";
		case "certification":
			return "text-purple-600 dark:text-purple-400";
		default:
			return "text-gray-600 dark:text-gray-400";
	}
};
---

<div class="timeline-container">
  <h2 class="text-3xl font-bold mb-12 text-center bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent">
    ‚ú® Timeline
  </h2>
  
  <div class="timeline-wrapper">
    {sortedYears.length > 0 ? (
      sortedYears.map((year, yearIndex) => (
        <div class="year-section">
          <!-- Âπ¥‰ªΩÊ®ôÈ°å -->
          <div class="year-header">
            <div class="year-badge">
              <span class="year-text">{year}</span>
            </div>
            <div class="year-line"></div>
          </div>
          
          <!-- Ë©≤Âπ¥‰ªΩÁöÑÊ¥ªÂãïÂàóË°® -->
          <div class="activities-list">
            {groupedExperiences[year].map((exp, activityIndex) => (
              <div class="activity-item">
                <div class="activity-connector"></div>
                <div class="activity-card">
                  <div class="activity-header">
                    <span class="type-icon">{getTypeIcon(exp.type)}</span>
                    <h3 class="activity-title">{exp.title}</h3>
                    <div class="type-badge">
                      <span class={`badge ${exp.type}`}>
                        {exp.type === 'achievement' ? 'ÊàêÂ∞±' :
                         exp.type === 'education' ? 'Â≠∏Áøí' :
                         exp.type === 'competition' ? 'Á´∂Ë≥Ω' : 'Ë™çË≠â'}
                      </span>
                    </div>
                  </div>
                  <p class="activity-description">{exp.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    ) : (
      <div class="no-data-message">
        <p class="text-center text-gray-500 dark:text-gray-400 py-8">
          üìã Êö´ÁÑ°Á∂ìÊ≠∑Ë≥áÊñô
        </p>
      </div>
    )}
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .timeline-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 3rem 1rem;
  }

  .timeline-wrapper {
    position: relative;
  }

  .year-section {
    margin-bottom: 4rem;
  }

  .year-header {
    display: flex;
    align-items: center;
    margin-bottom: 2rem;
    position: relative;
  }

  .year-badge {
    flex-shrink: 0;
    margin-right: 2rem;
  }

  .year-text {
    display: inline-block;
    padding: 1rem 2rem;
    font-weight: 800;
    font-size: 1.5rem;
    border-radius: 2rem;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
    min-width: 120px;
    text-align: center;
    position: relative;
    overflow: hidden;
    
    /* Glassmorphism ÊïàÊûú */
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: rgba(0, 0, 0, 0.85);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.1),
      0 2px 8px rgba(0, 0, 0, 0.05),
      inset 0 1px 1px rgba(255, 255, 255, 0.3);
  }

  /* ÁéªÁíÉÂèçÂÖâÊïàÊûú */
  .year-text::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    transition: left 0.6s ease;
  }

  .year-text:hover::before {
    left: 100%;
  }

  /* ÊöóËâ≤Ê®°Âºè‰∏ãÁöÑÁéªÁíÉÊïàÊûú */
  :global(.dark) .year-text {
    background: rgba(0, 0, 0, 0.25);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.15);
    color: rgba(255, 255, 255, 0.9);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.3),
      0 2px 8px rgba(0, 0, 0, 0.2),
      inset 0 1px 1px rgba(255, 255, 255, 0.1);
  }

  /* Êá∏ÂÅúÊïàÊûú */
  .year-text:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 12px 40px rgba(0, 0, 0, 0.15),
      0 4px 12px rgba(0, 0, 0, 0.1),
      inset 0 1px 1px rgba(255, 255, 255, 0.4);
  }

  :global(.dark) .year-text:hover {
    box-shadow: 
      0 12px 40px rgba(0, 0, 0, 0.4),
      0 4px 12px rgba(0, 0, 0, 0.3),
      inset 0 1px 1px rgba(255, 255, 255, 0.2);
  }

  .year-line {
    flex: 1;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), transparent);
    border-radius: 2px;
    opacity: 0.3;
  }

  .activities-list {
    padding-left: 2rem;
    position: relative;
  }

  .activities-list::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(180deg, 
      oklch(0.7 0.15 var(--hue) / 0.3),
      oklch(0.7 0.15 var(--hue) / 0.1),
      oklch(0.7 0.15 var(--hue) / 0.3)
    );
    border-radius: 2px;
  }

  .activity-item {
    position: relative;
    margin-bottom: 2rem;
    padding-left: 2rem;
  }

  .activity-connector {
    position: absolute;
    left: -8px;
    top: 1rem;
    width: 14px;
    height: 14px;
    border-radius: 50%;
    border: 3px solid var(--card-bg);
    z-index: 2;
    transition: all 0.3s ease;
    
    /* ÁéªÁíÉÊïàÊûúÁöÑÂúìÈªû */
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.1),
      0 0 0 2px oklch(0.7 0.15 var(--hue) / 0.3);
  }

  :global(.dark) .activity-connector {
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(10px);
    border-color: var(--card-bg);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.3),
      0 0 0 2px oklch(0.7 0.15 var(--hue) / 0.4);
  }

  .activity-item:hover .activity-connector {
    transform: scale(1.2);
    background: oklch(0.7 0.15 var(--hue) / 0.8);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.2),
      0 0 0 3px oklch(0.7 0.15 var(--hue) / 0.3);
  }

  :global(.dark) .activity-item:hover .activity-connector {
    background: oklch(0.7 0.15 var(--hue) / 0.9);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.4),
      0 0 0 3px oklch(0.7 0.15 var(--hue) / 0.4);
  }

  .activity-card {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(15px);
    border-radius: 1rem;
    padding: 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.3);
    transition: all 0.3s ease;
    position: relative;
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.08),
      0 1px 4px rgba(0, 0, 0, 0.04);
  }

  :global(.dark) .activity-card {
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.2),
      0 1px 4px rgba(0, 0, 0, 0.1);
  }

  .activity-item:hover .activity-card {
    transform: translateY(-2px);
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.12),
      0 2px 8px rgba(0, 0, 0, 0.06);
  }

  :global(.dark) .activity-item:hover .activity-card {
    background: rgba(0, 0, 0, 0.6);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.3),
      0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .activity-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .type-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
    flex-shrink: 0;
  }

  .activity-title {
    flex: 1;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    line-height: 1.4;
    margin: 0;
  }

  :global(.dark) .activity-title {
    color: rgba(255, 255, 255, 0.9);
  }

  .type-badge {
    flex-shrink: 0;
  }

  .badge {
    padding: 0.375rem 0.875rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: white;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
  }

  .badge.achievement {
    background: linear-gradient(135deg, 
      rgba(251, 191, 36, 0.9), 
      rgba(245, 158, 11, 0.9)
    );
  }

  .badge.education {
    background: linear-gradient(135deg, 
      rgba(59, 130, 246, 0.9), 
      rgba(29, 78, 216, 0.9)
    );
  }

  .badge.competition {
    background: linear-gradient(135deg, 
      rgba(16, 185, 129, 0.9), 
      rgba(5, 150, 105, 0.9)
    );
  }

  .badge.certification {
    background: linear-gradient(135deg, 
      rgba(139, 92, 246, 0.9), 
      rgba(124, 58, 237, 0.9)
    );
  }

  .badge:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .activity-description {
    color: var(--text-secondary);
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0;
  }

  :global(.dark) .activity-description {
    color: rgba(255, 255, 255, 0.7);
  }

  /* ÈüøÊáâÂºèË®≠Ë®à */
  @media (max-width: 768px) {
    .timeline-container {
      padding: 2rem 1rem;
    }

    .year-header {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .year-badge {
      margin-right: 0;
      text-align: center;
    }

    .year-text {
      font-size: 1.25rem;
      padding: 0.75rem 1.5rem;
      min-width: auto;
    }

    .year-line {
      height: 2px;
    }

    .activities-list {
      padding-left: 1rem;
      border-left-width: 2px;
    }

    .activity-item {
      padding-left: 1.5rem;
    }

    .activity-connector {
      left: -6px;
      width: 10px;
      height: 10px;
      border-width: 2px;
    }

    .activity-card {
      padding: 1.25rem;
    }

    .activity-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .activity-title {
      font-size: 1rem;
    }

    .type-badge {
      align-self: flex-end;
    }
  }
</style>
